from fastapi import FastAPI, Request
import os
import requests
import logging
from redis import Redis
from rq import Queue
from shared.parser import parse_documents

app = FastAPI()
q = Queue(connection=Redis.from_url(os.getenv("REDIS_URL")))
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

@app.get("/ping")
def ping():
    return {"pong": True}

@app.post("/webhook")
async def webhook(req: Request):
    data = await req.json()
    message = data.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    text = message.get("text")

    if text == "/start" or text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞":
        try:
            resp = requests.post(
                f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
                json={
                    "chat_id": chat_id,
                    "text": "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω–≤–æ–π—Å –∏ TIR/CMR –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
                    "reply_markup": {
                        "keyboard": [[{"text": "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"}]],
                        "resize_keyboard": True,
                        "one_time_keyboard": False
                    }
                }
            )
            logging.info(f"Telegram –æ—Ç–≤–µ—Ç: {resp.status_code} - {resp.text}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return {"ok": True}

    doc = message.get("document")
    if doc:
        file_id = doc["file_id"]
        q.enqueue("worker.worker.process_document", file_id, chat_id)
        return {"status": "queued"}

    return {"status": "ignored"}


